openapi: 3.0.3
info:
  title: Sanj CRUD API
  description: API para gestionar productos, órdenes y autenticación.
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Servidor local

paths:
  /api/products:
    get:
      summary: Listar todos los productos
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Crear un nuevo producto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Producto creado

  /api/products/{id}:
    get:
      summary: Obtener un producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Actualizar un producto por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Producto actualizado
    delete:
      summary: Eliminar un producto por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto eliminado

  /api/orders:
    get:
      summary: Listar todas las órdenes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de órdenes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Crear una nueva orden
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Orden creada

  /api/orders/{id}:
    put:
      summary: Actualizar una orden por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Orden actualizada
    delete:
      summary: Eliminar una orden por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orden eliminada

  /api/auth/register:
    post:
      summary: Registrar un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario registrado

  /api/auth/login:
    post:
      summary: Login de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: 123456
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token_aqui

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required:
        - name
        - price
        - category
        - sku
        - stock
      properties:
        name:
          type: string
          example: Producto A
        price:
          type: number
          example: 100
        category:
          type: string
          example: Electrónica
        sku:
          type: string
          example: SKU12345
        stock:
          type: integer
          example: 50

    OrderItem:
      type: object
      required:
        - product
        - quantity
      properties:
        product:
          type: string
          example: 64f0c9a2a12b3c0b12345678
        quantity:
          type: integer
          example: 2

    Order:
      type: object
      required:
        - orderNumber
        - customerName
        - items
      properties:
        orderNumber:
          type: string
          example: ORD001
        customerName:
          type: string
          example: Juan Pérez
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        subtotal:
          type: number
          example: 200
        tax:
          type: number
          example: 26
        total:
          type: number
          example: 226

    User:
      type: object
      required:
        - email
        - password
      properties:
        name:
          type: string
          example: Ricardo
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: 123456
